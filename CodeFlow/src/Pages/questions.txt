public class main {
    
 public static int bestDayToBuyStock(int[] prices) {
        if (prices == null || prices.length < 2) {
            return -1;  
        }

        int minPrice = prices[0];
        int bestDayToBuy = 0;

        for (int i = 1; i < prices.length; i++) {
            if (prices[i] < minPrice) {
                minPrice = prices[i];
                bestDayToBuy = i;
            }
        }

        return bestDayToBuy;
    }

    public static void main(String[] args) {
        int[] prices = {7, 1, 5, 3, 6, 4}; 
        int bestDay = bestDayToBuyStock(prices);
        
        if (bestDay == -1) {
            System.out.println("Not enough data to make a decision.");
        } else {
            System.out.println("Best day to buy stock: Day " + (bestDay + 1) + " with price " + prices[bestDay]);
        }
    }
}



public class main {
    public static String longestPalindrome(String s) {
        if (s == null || s.length() < 1) return "";

        int start = 0, end = 0;
        for (int i = 0; i < s.length(); i++) {
            int len1 = expandAroundCenter(s, i, i);
            int len2 = expandAroundCenter(s, i, i + 1);
            int len = Math.max(len1, len2);
            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        return s.substring(start, end + 1);
    }

    private static int expandAroundCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return right - left - 1;
    }

    public static void main(String[] args) {
        String input = "babad";
        System.out.println("Longest Palindrome: " + longestPalindrome(input));
    }
}


const express = require("express");
const bodyParser = require("body-parser");
const { exec } = require("child_process");
const cors = require("cors");
const app = express();
const fs = require("fs");
const port = 4500;
app.use(cors());
app.use(express.json());
const { compileRouter } = require("./routes/compilerRouter");
app.get("/", (req, res) => {
  res.send({ msg: "HOME" });
});
app.use("/compile", compileRouter);

app.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});
